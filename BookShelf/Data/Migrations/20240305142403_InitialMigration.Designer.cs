// <auto-generated />
using BookShelf.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookShelf.Data.Migrations
{
    [DbContext(typeof(BookShelfContext))]
    [Migration("20240305142403_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookShelf.Data.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Birthday")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("birthday");

                    b.Property<string>("CountryOfResidence")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_of_residence");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("HoursWritingPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("hours_writing_per_day");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text")
                        .HasColumnName("author_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_books_author_id");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("book_id");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<int>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("price");

                    b.Property<int>("PrintRunSize")
                        .HasColumnType("integer")
                        .HasColumnName("print_run_size");

                    b.Property<string>("PubId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pub_id");

                    b.Property<string>("PublicationDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publication_date");

                    b.HasKey("Id")
                        .HasName("pk_editions");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasDatabaseName("ix_editions_book_id");

                    b.ToTable("editions", (string)null);
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookId")
                        .HasColumnType("text")
                        .HasColumnName("book_id");

                    b.Property<int>("ReviewId")
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("integer")
                        .HasColumnName("reviewer_id");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("BookId")
                        .HasDatabaseName("ix_ratings_book_id");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Book", b =>
                {
                    b.HasOne("BookShelf.Data.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_books_authors_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Edition", b =>
                {
                    b.HasOne("BookShelf.Data.Entities.Book", "Book")
                        .WithOne("Edition")
                        .HasForeignKey("BookShelf.Data.Entities.Edition", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_editions_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Rating", b =>
                {
                    b.HasOne("BookShelf.Data.Entities.Book", "Book")
                        .WithMany("Ratings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_ratings_books_book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShelf.Data.Entities.Book", b =>
                {
                    b.Navigation("Edition");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
